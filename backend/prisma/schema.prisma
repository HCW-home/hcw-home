generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConsultationStatus {
  SCHEDULED
  WAITING
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id               Int           @id @default(autoincrement())
  role             Role          @default(Patient) // Enum: Patient, Practitioner, Admin
  firstName        String
  lastName         String
  email            String        @unique
  password         String
  temporaryAccount Boolean       @default(false)
  phoneNumber      String?       @unique()
  country          String?
  language         String?
  sex              Sex? // Enum: male, female, other
  status           Status        @default(not_approved) // Enum: approved, not_approved
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  // Relations
  participants     Participant[]
  organizations    UserOrganization[]
  groups           UserGroup[]
  userLanguages    UserLanguage[]
  specialties      UserSpecialty[]
}

enum Role {
  Patient
  Practitioner
  Admin
}

enum Sex {
  male
  female
  other
}

enum Status {
  approved
  not_approved
}

//  Add the new models/enums that is necessary for consultation remainders

enum MessageService {
  SMS
  EMAIL
  WHATSAPP
  MANUALLY
}

model Consultation {
  id                 Int                @id @default(autoincrement())
  scheduledDate      DateTime?
  createdAt          DateTime?
  startedAt          DateTime?
  closedAt           DateTime?
  createdBy          Int?
  groupId            Int?
  owner              Int?
  messageService     MessageService?
  whatsappTemplateId Int?
  status             ConsultationStatus @default(SCHEDULED)
  participants       Participant[]
}

model Participant {
  id             Int          @id @default(autoincrement())
  consultationId Int
  userId         Int
  isActive       Boolean      @default(false)
  joinedAt       DateTime?
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([consultationId, userId])
}

model Whatsapp_Template {
  id              String @id
  key             String
  friendlyName    String
  body            String
  language        String
  category        String
  contentType     String
  variables       Json
  actions         Json
  approvalStatus  String
  createdAt       BigInt
  updatedAt       BigInt
  sid             String
  types           Json
  url             String
  rejectionReason String
}

model SMS_Providers {
  id         String  @id
  createdAt  BigInt
  updatedAt  BigInt
  order      Int
  provider   String
  prefix     String
  isWhatsapp Boolean
  isDisabled Boolean
}

model Organization {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  users       UserOrganization[]
}

model Group {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       UserGroup[]
}

model Language {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  code        String         @unique
  users       UserLanguage[]
}

model Specialty {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String?
  users       UserSpecialty[]
}

// Junction tables for many-to-many relationships
model UserOrganization {
  userId         Int
  organizationId Int
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@id([userId, organizationId])
}

model UserGroup {
  userId    Int
  groupId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, groupId])
}

model UserLanguage {
  userId     Int
  languageId Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@id([userId, languageId])
}

model UserSpecialty {
  userId      Int
  specialtyId Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty   Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([userId, specialtyId])
}
