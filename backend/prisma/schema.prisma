generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConsultationStatus {
  SCHEDULED
  WAITING
  ACTIVE
  COMPLETED
  CANCELLED
  TERMINATED_OPEN
}

model User {
  id                 Int                        @id @default(autoincrement())
  role               UserRole
  firstName          String                     @db.VarChar(100)
  lastName           String                     @db.VarChar(100)
  email              String                     @unique @db.VarChar(255)
  password           String                     @db.VarChar(255)
  temporaryAccount   Boolean                    @default(false)
  phoneNumber        String?                    @db.VarChar(20)
  country            String?                    @db.VarChar(100)
  sex                UserSex?
  status             UserStatus                 @default(NOT_APPROVED)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  acceptedAt         DateTime?
  termId             Int?                       @default(0)
  termVersion        Float                      @default(0.00)
  term               Terms?                     @relation(fields: [termId], references: [id])
  Participant        Participant[]
  OrganizationMember OrganizationMember[]
  GroupMember        GroupMember[]
  Message            Message[]
  languages          UserLanguage[]
  specialities       UserSpeciality[]
  availability       PractitionerAvailability[] @relation("PractitionerAvailability")
  timeSlots          TimeSlot[]                 @relation("PractitionerTimeSlots")
  Consultation       Consultation[]
  ConsultationRating ConsultationRating[]

  @@map("users")
}

enum UserRole {
  PATIENT
  PRACTITIONER
  ADMIN
}

enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  APPROVED
  NOT_APPROVED
}

model Organization {
  id             Int      @id @default(autoincrement())
  name           String   @unique @db.VarChar(255)
  logo           String?
  primaryColor   String?
  footerMarkdown String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  members OrganizationMember[]
  groups  Group[]
  terms   Terms[]

  @@map("organizations")
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

model OrganizationMember {
  id             Int           @id @default(autoincrement())
  organizationId Int
  userId         Int
  role           OrgMemberRole @default(MEMBER)
  joinedAt       DateTime      @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Group {
  id                             Int      @id @default(autoincrement())
  organizationId                 Int
  name                           String
  description                    String?
  sharedOnlyIncomingConsultation Boolean  @default(false)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members       GroupMember[]
  consultations Consultation[]

  @@map("groups")
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  groupId  Int
  userId   Int
  joinedAt DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model Language {
  id   Int    @id @default(autoincrement())
  name String @unique

  users UserLanguage[]
}

model UserLanguage {
  id         Int @id @default(autoincrement())
  userId     Int
  languageId Int

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@unique([userId, languageId])
}

model Speciality {
  id   Int    @id @default(autoincrement())
  name String @unique

  users UserSpeciality[]
}

model UserSpeciality {
  id           Int @id @default(autoincrement())
  userId       Int
  specialityId Int

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  speciality Speciality @relation(fields: [specialityId], references: [id], onDelete: Cascade)

  @@unique([userId, specialityId])
}

model ConsultationRating {
  id             Int      @id @default(autoincrement())
  consultationId Int      @unique
  patientId      Int
  rating         Int
  comment        String?
  createdAt      DateTime @default(now())

  consultation Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  patient      User         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

//  Add the new models/enums that is necessary for consultation remainders

enum MessageService {
  SMS
  EMAIL
  WHATSAPP
  MANUALLY
}

model Consultation {
  id                  Int                @id @default(autoincrement())
  scheduledDate       DateTime?
  createdAt           DateTime?
  startedAt           DateTime?
  closedAt            DateTime?
  createdBy           Int?
  groupId             Int?
  ownerId             Int?
  messageService      MessageService?
  whatsappTemplateId  Int?
  status              ConsultationStatus @default(SCHEDULED)
  deletionScheduledAt DateTime?
  version             Int                @default(1)
  isDeleted           Boolean            @default(false)

  participants           Participant[]
  group                  Group?                   @relation(fields: [groupId], references: [id])
  messages               Message[]
  owner                  User?                    @relation(fields: [ownerId], references: [id])
  MediasoupRouter        MediasoupRouter[]
  timeSlot               TimeSlot?
  DeletedConsultationLog DeletedConsultationLog[]
  rating                 ConsultationRating?

  @@index([status])
  @@index([ownerId])
}

model MediasoupServer {
  id                  String            @id @default(cuid())
  url                 String            @unique
  username            String
  password            String
  maxNumberOfSessions Int               @default(100)
  active              Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  MediasoupRouter     MediasoupRouter[]

  @@map("mediasoup_servers")
}

model MediasoupRouter {
  id             String @id @default(cuid())
  consultationId Int    @unique
  routerId       String
  serverId       String

  consultation Consultation    @relation(fields: [consultationId], references: [id])
  server       MediasoupServer @relation(fields: [serverId], references: [id])

  @@unique([consultationId, serverId])
  @@index([routerId])
  @@map("mediasoup_routers")
}

model Participant {
  id             Int       @id @default(autoincrement())
  consultationId Int
  userId         Int
  isActive       Boolean   @default(false)
  isBeneficiary  Boolean   @default(false)
  token          String?   @db.VarChar(255)
  joinedAt       DateTime?
  language       String?   @db.VarChar(50)
  lastActiveAt   DateTime?

  // Relations
  consultation Consultation @relation(fields: [consultationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([consultationId, userId])
}

model Message {
  id      Int    @id @default(autoincrement())
  userId  Int
  content String @db.Text
  createdAt     DateTime  @default(now())
  // Relations
  user           User          @relation(fields: [userId], references: [id])
  consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId Int?
}

model Whatsapp_Template {
  id              String @id
  key             String
  friendlyName    String
  body            String
  language        String
  category        String
  contentType     String
  variables       Json
  actions         Json
  approvalStatus  String
  createdAt       BigInt
  updatedAt       BigInt
  sid             String
  types           Json
  url             String
  rejectionReason String
}

model SmsProvider {
  id         Int      @id @default(autoincrement())
  order      Int      @unique
  provider   String?
  prefix     String?
  isWhatsapp Boolean  @default(false)
  isDisabled Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("sms_providers")
}

model Terms {
  id        Int      @id @default(autoincrement())
  language  String
  country   String
  content   String
  version   Float    @default(1.00)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Organization
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
  User           User[]

  @@map("terms")
}

model DeletedConsultationLog {
  id             Int      @id @default(autoincrement())
  consultationId Int
  deletedAt      DateTime @default(now())
  reason         String?

  consultation Consultation @relation(fields: [consultationId], references: [id])

  @@index([consultationId])
}

model PractitionerAvailability {
  id             Int      @id @default(autoincrement())
  practitionerId Int
  dayOfWeek      Int
  startTime      String
  endTime        String
  slotDuration   Int      @default(30)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  practitioner User @relation("PractitionerAvailability", fields: [practitionerId], references: [id], onDelete: Cascade)

  @@index([practitionerId])
  @@map("practitioner_availability")
}

model TimeSlot {
  id             Int            @id @default(autoincrement())
  practitionerId Int
  date           DateTime
  startTime      String
  endTime        String
  status         TimeSlotStatus @default(AVAILABLE)
  consultationId Int?           @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  practitioner User          @relation("PractitionerTimeSlots", fields: [practitionerId], references: [id], onDelete: Cascade)
  consultation Consultation? @relation(fields: [consultationId], references: [id], onDelete: SetNull)

  @@index([practitionerId, date])
  @@map("time_slots")
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}
