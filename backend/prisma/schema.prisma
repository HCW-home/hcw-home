generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConsultationStatus {
  SCHEDULED
  WAITING
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id               Int           @id @default(autoincrement())
  role             Role          @default(Patient) // Enum: Patient, Practitioner, Admin
  firstName        String
  lastName         String
  password         String
  temporaryAccount Boolean
  phoneNumber      String        @unique()
  country          String
  language         String @default("en")
  sex              Sex // Enum: male, female, other
  status           Status        @default(not_approved) // Enum: approved, not_approved
  Participant      Participant[]
//  // Relations
//  patientConsultations  Participant[] @relation("PatientConsultations")
//  practitionerConsultations Participant[] @relation("PractitionerConsultations")
}

enum Role {
  Patient
  Practitioner
  Admin
}

enum Sex {
  male
  female
  other
}

enum Status {
  approved
  not_approved
}

//  Add the new models/enums that is necessary for consultation remainders

enum MessageService {
  SMS
  EMAIL
  WHATSAPP
  MANUALLY
}

model Consultation {
  id                 Int                @id @default(autoincrement())
  uuid               String          @unique @default(uuid())
  status             ConsultationStatus @default(SCHEDULED)
  language           String          @default("en")
  owner              Int?
  messageService     MessageService
  scheduledDate      DateTime?
  createdAt          DateTime        @default(now())
  startedAt          DateTime?
  closedAt           DateTime?
  magicLink          String?
  introMessage       String?
  templateId         String?         // Reference to Whatsapp_Template
  // Relations
  participants       Participant[]
  patientId          Int?            // For direct reference lookup
  practitionerId     Int?            // For direct reference lookup
}

// model Participant {
//   id             Int              @id @default(autoincrement())
//   consultationId Int
//   userId         Int
//   role           ParticipantRole
//   name           String
//   email          String?
//   phone          String?
//   // Relations
//   consultation   Consultation     @relation(fields: [consultationId], references: [id])
//   patient        User?            @relation("PatientConsultations", fields: [userId], references: [id], map: "Participant_patientId_fkey")
//   practitioner   User?            @relation("PractitionerConsultations", fields: [userId], references: [id], map: "Participant_practitionerId_fkey")
// 
//   @@unique([consultationId, userId, role])
//   status             ConsultationStatus @default(SCHEDULED)
//   participants       Participant[]
// }

model Participant {
  id             Int          @id @default(autoincrement())
  consultationId Int
  userId         Int
  isActive       Boolean      @default(false)
  joinedAt       DateTime?
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([consultationId, userId])
}

model Whatsapp_Template {
  id              String @id
  key             String
  friendlyName    String
  body            String
  language        String
  category        String
  contentType     String
  variables       Json
  actions         Json
  approvalStatus  String
  createdAt       BigInt
  updatedAt       BigInt
  sid             String
  types           Json
  url             String
  rejectionReason String
}

model SMS_Providers {
  id         String  @id
  createdAt  BigInt
  updatedAt  BigInt
  order      Int
  provider   String
  prefix     String
  isWhatsapp Boolean
  isDisabled Boolean
}
