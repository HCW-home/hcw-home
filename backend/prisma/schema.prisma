generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConsultationStatus {
  SCHEDULED
  WAITING
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id               Int           @id @default(autoincrement())
  role             Role          @default(Patient) // Enum: Patient, Practitioner, Admin, Expert, Guest
  firstName        String
  lastName         String
  email            String?       @unique
  password         String
  temporaryAccount Boolean
  phoneNumber      String?       @unique
  country          String
  language         String
  sex              Sex // Enum: male, female, other
  status           Status        @default(not_approved) // Enum: approved, not_approved
  Participant      Participant[]
}

enum Role {
  Patient
  Practitioner
  Admin
  Expert
  Guest
}

enum Sex {
  male
  female
  other
}

enum Status {
  approved
  not_approved
}

//  Add the new models/enums that is necessary for consultation remainders

enum MessageService {
  SMS
  EMAIL
  WHATSAPP
  MANUALLY
}

enum InvitationRole {
  Expert
  Guest
}

model Consultation {
  id                 Int                @id @default(autoincrement())
  scheduledDate      DateTime?
  createdAt          DateTime?
  startedAt          DateTime?
  closedAt           DateTime?
  createdBy          Int?
  groupId            Int?
  owner              Int?
  messageService     MessageService?
  whatsappTemplateId Int?
  status             ConsultationStatus @default(SCHEDULED)
  participants       Participant[]
  invitations        Invitation[]
  messages           Message[]
}

model Participant {
  id             Int          @id @default(autoincrement())
  consultationId Int
  userId         Int
  isActive       Boolean      @default(false)
  joinedAt       DateTime?
  consultation   Consultation @relation(fields: [consultationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  messages       Message[]
  readReceipts   ReadReceipt[]

  @@unique([consultationId, userId])
}

model Whatsapp_Template {
  id              String @id
  key             String
  friendlyName    String
  body            String
  language        String
  category        String
  contentType     String
  variables       Json
  actions         Json
  approvalStatus  String
  createdAt       BigInt
  updatedAt       BigInt
  sid             String
  types           Json
  url             String
  rejectionReason String
}

model SMS_Providers {
  id         String  @id
  createdAt  BigInt
  updatedAt  BigInt
  order      Int
  provider   String
  prefix     String
  isWhatsapp Boolean
  isDisabled Boolean
}

// Model for chat messages
model Message {
  id             Int          @id @default(autoincrement())
  consultationId Int
  senderId       Int
  content        String
  contentType    MessageContentType @default(TEXT)
  fileUrl        String?            // For file/image attachments
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  consultation   Consultation  @relation(fields: [consultationId], references: [id])
  sender         Participant   @relation(fields: [senderId], references: [id])
  readReceipts   ReadReceipt[]
}

// Model for tracking read receipts
model ReadReceipt {
  id            Int         @id @default(autoincrement())
  messageId     Int
  participantId Int
  readAt        DateTime    @default(now())
  message       Message     @relation(fields: [messageId], references: [id])
  participant   Participant @relation(fields: [participantId], references: [id])

  @@unique([messageId, participantId])
}

model Invitation {
  id             Int             @id @default(autoincrement())
  consultationId Int
  name           String
  contactValue   String
  contactMethod  MessageService
  role           InvitationRole
  notes          String?
  token          String          @unique
  sentAt         DateTime?
  consultation   Consultation    @relation(fields: [consultationId], references: [id])
}

enum MessageContentType {
  TEXT
  IMAGE
  FILE
}
