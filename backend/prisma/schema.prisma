generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConsultationStatus {
  SCHEDULED
  WAITING
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id                 Int                  @id @default(autoincrement())
  role               UserRole
  firstName          String               @db.VarChar(100)
  lastName           String               @db.VarChar(100)
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  temporaryAccount   Boolean              @default(false)
  phoneNumber        String?              @db.VarChar(20)
  country            String?              @db.VarChar(100)
  sex                UserSex?
  status             UserStatus           @default(NOT_APPROVED)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Participant        Participant[]
  OrganizationMember OrganizationMember[]
  GroupMember        GroupMember[]
  Message            Message[]

  @@map("users")
}

enum UserRole {
  PATIENT
  PRACTITIONER
  ADMIN
}

enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  APPROVED
  NOT_APPROVED
}

model Organization {
  id             Int      @id @default(autoincrement())
  name           String   @unique @db.VarChar(255)
  logo           String?
  primaryColor   String?
  footerMarkdown String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  members OrganizationMember[]
  groups  Group[]

  @@map("organizations")
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

model OrganizationMember {
  id             Int           @id @default(autoincrement())
  organizationId Int
  userId         Int
  role           OrgMemberRole @default(MEMBER)
  joinedAt       DateTime      @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

model Group {
  id                             Int      @id @default(autoincrement())
  organizationId                 Int
  name                           String
  description                    String?
  sharedOnlyIncomingConsultation Boolean  @default(false)
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members       GroupMember[]
  consultations Consultation[]

  @@map("groups")
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  groupId  Int
  userId   Int
  joinedAt DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

//  Add the new models/enums that is necessary for consultation remainders

enum MessageService {
  SMS
  EMAIL
  WHATSAPP
  MANUALLY
}

model Consultation {
  id                 Int                @id @default(autoincrement())
  scheduledDate      DateTime?
  createdAt          DateTime?
  startedAt          DateTime?
  closedAt           DateTime?
  createdBy          Int?
  groupId            Int?
  owner              Int?
  messageService     MessageService?
  whatsappTemplateId Int?
  status             ConsultationStatus @default(SCHEDULED)

  // Relations
  participants Participant[]
  group        Group?        @relation(fields: [groupId], references: [id])
  messages     Message[]
}

model MediasoupServer {
  id                  String   @id @default(cuid())
  url                 String   @unique
  username            String
  password            String
  maxNumberOfSessions Int      @default(100)
  active              Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("mediasoup_servers")
}

model Participant {
  id             Int       @id @default(autoincrement())
  consultationId Int
  userId         Int
  isActive       Boolean   @default(false)
  isBeneficiary  Boolean   @default(false)
  token          String?   @db.VarChar(255)
  joinedAt       DateTime?

  // Relations
  consultation Consultation @relation(fields: [consultationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([consultationId, userId])
}

model Message {
  id             Int             @id @default(autoincrement())
  userId         Int
  consultationId Int?
  content        String          @db.Text
  status         String?         @db.VarChar(50)
  provider       MessageService?
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  uuid           String?         @unique @db.VarChar(100)

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  consultation Consultation? @relation(fields: [consultationId], references: [id])
  auditLogs    AuditLog[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  messageId Int
  oldStatus String?
  newStatus String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
}

model Whatsapp_Template {
  id              String @id
  key             String
  friendlyName    String
  body            String
  language        String
  category        String
  contentType     String
  variables       Json
  actions         Json
  approvalStatus  String
  createdAt       BigInt
  updatedAt       BigInt
  sid             String
  types           Json
  url             String
  rejectionReason String
}

model SMS_Providers {
  id         String  @id
  createdAt  BigInt
  updatedAt  BigInt
  order      Int
  provider   String
  prefix     String
  isWhatsapp Boolean
  isDisabled Boolean
}
